// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.
// Создаем систему управления этими заказами, которая позволяет:
// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используем коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используем объекты.

// Повара и их специализации:
// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:
// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:
// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

const povar = new Map();
povar.set("Виктор", "Пицца")
    .set("Ольга", "Суши")
    .set("Дмитрий", "Десерты");

const cookDishes = new Map();
cookDishes.set("Пицца Маргарита", "Виктор")
    .set("Пицца Пепперони", "Виктор")
    .set("Суши Филадельфия", "Ольга")
    .set("Суши Калифорния", "Ольга")
    .set("Тирамису", "Дмитрий")
    .set("Чизкейк", "Дмитрий");

const dishes = new Set();
for (const dish of cookDishes.keys()) {
    dishes.add(dish);
}

const clientsSet = new Set(["Алексей", "Мария", "Ирина"]);
const clients = Array.from(clientsSet);

const orders = new Map([
    ["Алексей", ["Пицца Пепперони", "Тирамису"]],
    ["Мария", ["Суши Калифорния", "Пицца Маргарита"]],
    ["Ирина", ["Чизкейк"]]
]);

console.log(`Клиент ${clients[0]} заказал: ${orders.get("Алексей")}`);
console.log(`Клиент ${clients[1]} заказала: ${orders.get("Мария")}`);
console.log(`Клиент ${clients[2]} заказала: ${orders.get("Ирина")}`);